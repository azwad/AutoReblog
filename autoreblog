#!/usr/bin/perl
use lib qw(/home/toshi/perl/lib);
use strict;
use TumblrDashboard;
use Encode;
use utf8;
use Config::Pit;
use WWW::Mechanize;
use feature qw( say );

my $pit_account = 'news.azwad.com';

my $offset = 0;
my $num = 10;
my $max = 100;
my $type = '';
my $delay_time1 = 3;
my $delay_time2 = 1;

my $dbname = 'tumblr_deduped_check';
my %deduped = {};
dbmopen(%deduped, $dbname, 0644);
my $deduped = \%deduped;

my %reblog_history = {};
dbmopen(%reblog_history,'reblog_history',0644);
my $reblog_history = \%reblog_history;

for ($offset = 0; $offset <= $max ; $offset += $num){
	my $td = TumblrDashboard->new($pit_account);
	print "offset = ". $offset ." num = ". $num . "\n";
	my %opt = (
		'start' => $offset,
		'num'		=> $num,
		'type'	=> $type,
#		'filter'=> 'none',
#		'likes' => '0',
	);
	$td->set_option(%opt);
	my $res  = $td->get_hash;
	open my $fh2, '>>', 'tumblrdashboard.txt';
	open my $fh3, '>>', 'dblist.txt';

	while (my ($post, $values) = each %$res) {
 	 if (exists $deduped{$post}){
			print $deduped{$post} ."is match an old post\n";
			next;
		}else {
			my @urls =();
			while (my ($number, $url) = each %$deduped){
				push(@urls,$url);
			}
			my $date = $values->{date};
			my $publish_type = $values->{type};
			$_ =  $values->{'quote-source'} || $values->{'link-description'} || $values->{'photo-caption'};
			s/<a href="(http.+?)".*>(.+?)<\/a>/$1,$2/ ;
			my $title = $2 ;
			my $link =  $1 || $values->{'photo-link-url'} || $values->{'url'};
#			$link =~ s/\;.*?$//;
			my $from = $values->{tumblelog}[0];
			print $title." : ".$link ."\n";
			if ( grep{	my $var = $_;
									$var =~ /^$link/ || $link =~ /^$var/ } @urls){
				print "match listed url\n";
				next;
			}else{
				my $text = $values->{'quote-text'} || $values->{'link-text'} || $values->{'regular-body'};
				$deduped{$post} = $link;
				utf8::is_utf8($title)?encode('utf-8',$title):$title;
				utf8::is_utf8($text)?encode('utf-8', $text):$text;
				my $reblog_key = $values->{'reblog-key'};
				my $note_count = $values->{'note-count'};
				print $fh3 $post." : ".$from ." : " .$publish_type." : ". $link ." : ". $note_count . " : " .$title;
				print $fh2 $title." : ".$link."\n";
				print $fh2 $date." : ".$publish_type."\n";
				print $fh2 $reblog_key. " : ". $note_count. "\n";
				print $fh2 "\n";
				print $fh2 $text."\n";
				print $fh2 "\n";
				if (decide_post($post, $from, $reblog_key, $note_count, $text, $link, $publish_type)){
					print "reblog this post\n";
					reblog($post, $reblog_key, $link) ;
					print $fh3 " : rebloged\n";
					sleep $delay_time1;
				}else{
					print "don't reblog\n";
					print $fh3 "\n";
					next;
				}
			}
		}
	}
	sleep $delay_time2;
	close $fh2;
	close $fh3;
}

dbmclose(%deduped);
dbmclose(%reblog_history);



sub reblog {
	my ($post, $reblog_key, $link) = @_;
	if (my $res = reblog_post($post,$reblog_key)){
		print "succeed.\n";
		$reblog_history->{$post} = $link;
		return;
	}else{
		print "reblog failed.\n";
		return;
	};
}

sub decide_post {
	my ($post, $from, $reblog_key, $note_count, $text, $link,$publish_type) = @_;
	$text =~ s/<.*?>//g;
	my $text_length = length($text);
	my $decision = 0;
	if ($from eq 'toshi0104'){
		print "can't reblog my post\n";
		return $decision = 0;
	}elsif ( $publish_type !~ s/(quote|regular)//){
		print "don't reblog this content\n";
		return $decision = 0;
	}elsif(($note_count <= 100) && ($text_length >= 500)){
		print "match rule1: notecount is $note_count : text length is $text_length\n";
		$decision = 1;
	}elsif ($text_length >= 1000) {
		print "match rule2: text length is $text_length\n";
		$decision = 1;
	}else{
		print "no match\n";
		return $decision = 0;
	}
	while  (my ($key, $value) = each %$reblog_history) {
		if ($key eq $post) {
			print "$post is already rebloged\n";
			return $decision = 0;
		}elsif ($value eq $link){
			print "$link is already rebloged\n";
			return $decision = 0;
		}else{
			next;
		}
	}
	return $decision;
}

sub reblog_post{
	my ($post,$reblog_key) = @_;
	my $reblog_api ='http://www.tumblr.com/api/reblog';
	my $config = Config::Pit::pit_get($pit_account, require => {
		"user" => "username",
		"email"=> "email",
		"password" => "password"
		}
	);
	my $email = $config->{email};
	my $password = $config->{password};
	my $url = $reblog_api. "?email=". $email."&password=". $password. "&post-id=". $post. "&reblog-key=".$reblog_key;
	my $uri = URI->new($url);
	my $rpost = WWW::Mechanize->new();
	my $res =	$rpost->get($uri);
	print $res->{_content}."\n";
	return $res->{_content};
}


